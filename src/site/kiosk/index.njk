---
layout: layouts/_base.njk
pagination:
  data: collections.blog
  size: 16
  reverse: true
  alias: blog
---

<!-- prettier-ignore -->
{% import "components/logo.njk" as logo %}
<!-- prettier-ignore -->
{% import "components/menu.njk" as menu %}

<!-- prettier-ignore -->
{{ menu.render() }}
<div class="grid grid-cols-4 lg:grid-cols-16 py-8">
  <header
    class="col-span-columns lg:col-start-column-1 lg:col-end-gutter-7 mb-8"
  >
    <!-- prettier-ignore -->
    {{ logo.render() }}
  </header>
  <form class="col-span-columns -mr-4 mb-8">
    <input
      type="checkbox"
      name="kiosk-filter"
      value="RxC Community Calls"
    /><label class="ml-2 mr-4 text-size--1" for="RxC Community Calls"
      >RxC Community Calls</label
    >
    <input type="checkbox" name="kiosk-filter" value="RxC Fundamentals" /><label
      class="ml-2 mr-4 text-size--1"
      for="RxC Fundamentals"
      >RxC Fundamentals</label
    >
  </form>
  <ol
    id="kiosk-list"
    class="col-span-columns grid grid-cols-1traditional lg:grid-cols-2traditional xl:grid-cols-4traditional lg:grid-rows-4 col-gap-8 row-gap-16 mb-8"
  >
    <!-- prettier-ignore -->
    {% for post in blog %}
    <li
      data-kiosk
      data-kiosk-series="{{ post.data.series | default([]) | dump }}"
    >
      <a
        class="flex flex-col justify-between h-full kiosk_border-b"
        href="{{ post.url }}"
      >
        <div class="mb-8">
          <p class="text-size--1">Blog Post</p>
          <h2 data-kiosk-item-prop="postHeader" class="text-size-2">
            {{ post.data.postHeader }}
          </h2>
        </div>
        <div>
          <p data-kiosk-item-prop="postAuthor" class="text-size--3">
            {{ post.data.postAuthor }}
          </p>
          <p data-kiosk-item-prop="date" class="text-size--3">
            {{ post.data.date | readableDate }}
          </p>
        </div>
      </a>
    </li>
    <!-- prettier-ignore -->
    {% endfor %}
  </ol>
  <div class="col-span-columns pb-4 border-b text-size--1">
    <button id="kiosk-load-button" class="uppercase">Load more</button>
  </div>
</div>
<script>
  // prettier-ignore
  {% include "components/infinite-scroll.js" %}
</script>
<script>
  const Kiosk = function () {
    this.$kioskList = document.getElementById("kiosk-list");
    this.$items = this.$kioskList.children;
    this.$itemTemplate = this.$items[0].cloneNode(true);
    this.$allSeries = document.querySelectorAll(
      'input[type=checkbox][name="kiosk-filter"]'
    );
    this.checkedSeries = [];
    this.$loadButton = document.getElementById("kiosk-load-button");
    this.next = "/api/kiosk/page-2.json";
  };

  Kiosk.prototype.init = function () {
    this.checkedSeries = [];
    for (const $series of this.$allSeries) {
      if ($series.checked) {
        this.checkedSeries.push($series.value);
      }
      $series.addEventListener("change", (event) => this.onSeriesChange(event));
    }

    this.$loadButton.addEventListener("click", (event) => {
      this.fetchMore();
    });
  };

  Kiosk.prototype.filterItem = function ($item) {
    if (this.checkedSeries.length === 0) {
      $item.style.display = "block";
      return;
    }

    const itemSeries = JSON.parse($item.dataset["kioskSeries"]);

    let found = false;
    for (const series of itemSeries) {
      if (this.checkedSeries.includes(series)) {
        found = true;
        break;
      }
    }

    if (found) {
      $item.style.display = "block";
    } else {
      $item.style.display = "none";
    }
  };

  Kiosk.prototype.onSeriesChange = function (event) {
    this.checkedSeries = [];
    for (const $series of this.$allSeries) {
      if ($series.checked) {
        this.checkedSeries.push($series.value);
      }
    }
    for (const $item of this.$items) {
      this.filterItem($item);
    }
  };

  Kiosk.prototype.addItem = function (item) {
    const $item = this.$itemTemplate.cloneNode(true);
    $item.dataset["kioskSeries"] = JSON.stringify(item.data.series);

    const $anchor = $item.children[0];
    $anchor.href = item.url;
    $anchor.querySelector('[data-kiosk-item-prop="postHeader"').innerText =
      item.data.postHeader;
    $anchor.querySelector('[data-kiosk-item-prop="postAuthor"').innerText =
      item.data.postAuthor;
    $anchor.querySelector('[data-kiosk-item-prop="date"').innerText =
      item.data.date;

    this.filterItem($item);

    this.$kioskList.appendChild($item);
  };

  Kiosk.prototype.fetchMore = function () {
    if (!this.next) {
      return Promise.resolve();
    }
    this.$loadButton.innerText = "Loading...";
    this.$loadButton.disabled = true;
    return fetch(this.next)
      .then((r) => r.json())
      .then((data) => {
        for (const item of data.items) {
          this.addItem(item);
        }
        this.next = data.next;
        if (this.next) {
          this.$loadButton.innerText = "Load more";
          this.$loadButton.disabled = false;
        } else {
          this.$loadButton.innerText = "The End";
          this.$loadButton.disabled = true;
        }
      })
      .catch(() => {
        this.$loadButton.innerText = "Error: reload the page";
        this.$loadButton.disabled = false;
      });
  };

  const kiosk = new Kiosk();
  kiosk.init();

  // const infiniteScroller = new InfiniteScroll(() => kiosk.fetchMore());
  // infiniteScroller.init();
</script>
