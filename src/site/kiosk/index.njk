---
layout: layouts/_base.njk
pagination:
  data: collections.blog
  size: 16
  reverse: true
  alias: blog
---

<!-- prettier-ignore -->
{% import "components/logo.njk" as logo %}
<!-- prettier-ignore -->
{% import "components/menu.njk" as menu %}

<!-- prettier-ignore -->
{{ menu.render() }}
<div class="grid grid-cols-4 lg:grid-cols-16 py-8">
  <header
    class="col-span-columns lg:col-start-column-1 lg:col-end-gutter-7 mb-8"
  >
    <!-- prettier-ignore -->
    {{ logo.render() }}
  </header>
  <form class="col-span-columns -mr-4 mb-8">
    <input
      type="checkbox"
      name="kiosk-filter"
      value="RxC Community Calls"
    /><label class="ml-2 mr-4 text-size--1" for="RxC Community Calls"
      >RxC Community Calls</label
    >
    <input type="checkbox" name="kiosk-filter" value="RxC Fundamentals" /><label
      class="ml-2 mr-4 text-size--1"
      for="RxC Fundamentals"
      >RxC Fundamentals</label
    >
  </form>
  <ol
    id="kiosk-list"
    class="col-span-columns grid grid-cols-4traditional lg:grid-rows-4 col-gap-8 row-gap-16"
  >
    <!-- prettier-ignore -->
    {% for post in blog %}
    <li
      data-kiosk
      data-kiosk-series="{{ post.data.series | default([]) | dump }}"
    >
      <a
        class="flex flex-col justify-between h-full kiosk_border-b"
        href="{{ post.url }}"
      >
        <div>
          <p class="text-size--1">Blog Post</p>
          <h2 data-kiosk-item-prop="postHeader" class="text-size-2">
            {{ post.data.postHeader }}
          </h2>
        </div>
        <div>
          <p data-kiosk-item-prop="postAuthor" class="text-size--3">
            {{ post.data.postAuthor }}
          </p>
          <p data-kiosk-item-prop="date" class="text-size--3">
            {{ post.data.date | readableDate }}
          </p>
        </div>
      </a>
    </li>
    <!-- prettier-ignore -->
    {% endfor %}
  </ol>
</div>
<script>
  // prettier-ignore
  {% include "components/infinite-scroll.js" %}
</script>
<script>
  const $kioskList = document.getElementById("kiosk-list");
  const allItems = $kioskList.children;
  const filterButtons = document.querySelectorAll(
    'input[type=checkbox][name="kiosk-filter"]'
  );

  function onChangeFilterButton() {
    const checkedSeries = [];
    for (const filterButton of filterButtons) {
      if (filterButton.checked) {
        checkedSeries.push(filterButton.value);
      }
    }

    if (checkedSeries.length === 0) {
      for (const item of allItems) {
        item.style.display = "block";
      }
    } else {
      for (const item of allItems) {
        const itemSeries = JSON.parse(item.dataset["kioskSeries"]);

        let found = false;
        for (const series of itemSeries) {
          if (checkedSeries.includes(series)) {
            found = true;
            break;
          }
        }

        if (found) {
          item.style.display = "block";
        } else {
          item.style.display = "none";
        }
      }
    }
  }

  for (const filterButton of filterButtons) {
    filterButton.addEventListener("change", onChangeFilterButton);
  }

  const $itemTemplate = $kioskList.children[0].cloneNode(true);
  function makeKioskItem(item) {
    const $item = $itemTemplate.cloneNode(true);
    $item.dataset["kioskSeries"] = JSON.stringify(item.data.series);

    const $anchor = $item.children[0];
    $anchor.href = item.url;
    $anchor.querySelector('[data-kiosk-item-prop="postHeader"').innerText =
      item.data.postHeader;
    $anchor.querySelector('[data-kiosk-item-prop="postAuthor"').innerText =
      item.data.postAuthor;
    $anchor.querySelector('[data-kiosk-item-prop="date"').innerText =
      item.data.date;

    return $item;
  }

  const KioskFetcher = function () {
    this.next = "/api/kiosk/page-2.json";
  };

  KioskFetcher.prototype.fetchMore = function () {
    if (!this.next) {
      return Promise.resolve();
    }

    return fetch(this.next)
      .then((r) => r.json())
      .then((data) => {
        for (const item of data.items) {
          const $newItem = makeKioskItem(item);
          $kioskList.appendChild($newItem);
        }
        this.next = data.next;
      });
  };

  const kioskFetcher = new KioskFetcher();
  const infiniteScroller = new InfiniteScroll(() => kioskFetcher.fetchMore());
  infiniteScroller.init();

  // let isFetching = false;
  // let nextPage = "/api/kiosk/page-2.json";
  // function onScrollToBottom() {
  //   if (isFetching) {
  //     return;
  //   }
  //   if (!nextPage) {
  //     return;
  //   }

  //   isFetching = true;
  //   for (let i = 0; i < 16; i++) {
  //     const $newItem = makeKioskItem({
  //       url: "/blog/posts/rxc-november-community-call-recording-notes/",
  //       data: {
  //         date: "November 9, 2020",
  //         title: "RxC November Community Call Recording & Notes",
  //         postHeader: "RxC November Community Call Recording & Notes",
  //         postAuthor: "Fanny Lakoubay",
  //         series: ["RxC Community Calls"],
  //       },
  //     });
  //     $kioskList.appendChild($newItem);
  //   }
  // }

  // window.addEventListener("scroll", () => {
  //   const { scrollHeight, scrollTop, clientHeight } = document.documentElement;
  //   if (scrollTop + clientHeight > scrollHeight - 5) {
  //     onScrollToBottom();
  //   }
  // });
</script>
