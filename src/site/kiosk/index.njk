---
layout: layouts/_base.njk
title: Kiosk
headerText: RxC KIOSK
---

<!-- prettier-ignore -->
{% import "components/logo.njk" as logo %}
<!-- prettier-ignore -->
{% import "components/menu.njk" as menu %}
<!-- prettier-ignore -->
{% import "components/footer.njk" as footer %}

<!-- prettier-ignore -->
{{ menu.render() }}
<div
  class="grid grid-cols-layout-4 lg:grid-cols-layout-16 grid-rows-auto/auto/1fr/auto min-h-screen py-8"
>
  <header
    class="col-span-columns lg:col-start-column-1 lg:col-end-gutter-7 mb-8"
  >
    <h1 class="font-display text-size-display lg:text-size-lg/display">
      <a href="/">{{ headerText }}</a>
    </h1>
  </header>
  <form
    class="col-span-columns grid lg:flex grid-cols-1 md:grid-cols-auto/auto justify-start lg:grid-cols-none -mr-4 mb-8"
    autocomplete="off"
  >
    <div>
      <input type="checkbox" name="kiosk-filter" value="Blog" /><label
        class="ml-2 mr-4 text-size--1"
        for="Blog"
        >Blog</label
      >
    </div>
    <div>
      <input type="checkbox" name="kiosk-filter" value="Papers" /><label
        class="ml-2 mr-4 text-size--1"
        for="Papers"
        >Papers</label
      >
    </div>
    <div>
      <input type="checkbox" name="kiosk-filter" value="Announcements" /><label
        class="ml-2 mr-4 text-size--1"
        for="Announcements"
        >Announcements</label
      >
    </div>
    <div>
      <input
        type="checkbox"
        name="kiosk-filter"
        value="Podcasts / Videos"
      /><label class="ml-2 mr-4 text-size--1" for="Podcasts / Videos"
        >Podcasts / Videos</label
      >
    </div>
  </form>
  <ol
    id="kiosk-list"
    class="col-span-columns grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-4 grid-rows-kiosk gap-x-8 gap-y-16 mb-8"
  >
    {% for post in collections.kiosk[0].items %}
    <li
      data-kiosk
      data-kiosk-series="{{ post.data.series | default([]) | dump }}"
    >
      <a
        class="flex flex-col justify-between h-full kiosk_border-b"
        href="{{ post.url }}"
      >
        <div class="mb-8">
          <p data-kiosk-item-prop="postType" class="text-size--1">
            {{ post.postType }}
          </p>
          <h2
            data-kiosk-item-prop="postHeader"
            class="leading-snug text-size-2 lg:min-h-line-5"
          >
            {{ post.postHeader }}
          </h2>
        </div>
        <div>
          <p
            data-kiosk-item-prop="postAuthor"
            class="text-size--2 lg:text-size--3"
          >
            {{ post.postAuthor }}
          </p>
          <p
            data-kiosk-item-prop="readableDate"
            class="text-size--2 lg:text-size--3"
          >
            {{ post.readableDate }}
          </p>
        </div>
      </a>
    </li>
    <!-- prettier-ignore -->
    {% endfor %}
  </ol>
  <div class="col-span-columns pb-4 border-b text-size--1">
    <button id="kiosk-load-button" class="uppercase">Load more</button>
  </div>
</div>
<!-- prettier-ignore -->
{{ footer.render() }}
<script>
  // prettier-ignore
  {% include "components/menu.js" %}
</script>
<script>
  const Kiosk = function () {
    this.$kioskList = document.getElementById("kiosk-list");
    this.$itemTemplate = this.$kioskList.children[0].cloneNode(true);

    this.$allSeries = document.querySelectorAll(
      'input[type=checkbox][name="kiosk-filter"]'
    );
    this.checkedSeries = "All";

    this.$loadButton = document.getElementById("kiosk-load-button");
    this.isLoading = false;
    this.nextPage = "/api/kiosk/all-2.json";
  };

  Kiosk.prototype.SERIES_API = {
    All: "/api/kiosk/all-1.json",
    Blog: "/api/kiosk/blog-1.json",
    Papers: "/api/kiosk/papers-1.json",
    Announcements: "/api/kiosk/announcements-1.json",
    "Podcasts / Videos": "/api/kiosk/podcastsVideos-1.json",
  };

  Kiosk.prototype.init = function () {
    for (const $series of this.$allSeries) {
      $series.addEventListener("change", (event) => this.onSeriesChange(event));
    }

    this.$loadButton.addEventListener("click", (event) => {
      this.fetchMore();
    });
  };

  Kiosk.prototype.onSeriesChange = function (event) {
    // Manage checkbox state
    if (event.target.checked) {
      this.checkedSeries = event.target.value;
      for (const $series of this.$allSeries) {
        if ($series.value !== this.checkedSeries) {
          $series.checked = false;
        }
      }
    } else {
      this.checkedSeries = "All";
    }

    // Load new data
    this.nextPage = this.SERIES_API[this.checkedSeries];
    this.fetchMore();

    // Remove all children in anticipation of new children
    while (this.$kioskList.firstChild) {
      this.$kioskList.removeChild(this.$kioskList.firstChild);
    }
  };

  Kiosk.prototype.addItem = function (item) {
    const $item = this.$itemTemplate.cloneNode(true);
    $item.dataset["kioskSeries"] = JSON.stringify(item.series);

    const $anchor = $item.children[0];
    $anchor.href = item.url;
    $anchor.querySelector('[data-kiosk-item-prop="postType"').innerText =
      item.postType;
    $anchor.querySelector('[data-kiosk-item-prop="postHeader"').innerText =
      item.postHeader;
    $anchor.querySelector('[data-kiosk-item-prop="postAuthor"').innerText =
      item.postAuthor;
    $anchor.querySelector('[data-kiosk-item-prop="readableDate"').innerText =
      item.readableDate;

    this.$kioskList.appendChild($item);
  };

  Kiosk.prototype.fetchMore = function () {
    if (this.isLoading || !this.nextPage) {
      return;
    }

    this.$loadButton.innerText = "Loading...";
    this.$loadButton.disabled = true;
    this.isLoading = true;

    fetch(this.nextPage)
      .then((r) => r.json())
      .then((data) => {
        for (const item of data.items) {
          this.addItem(item);
        }
        this.isLoading = false;
        this.nextPage = data.next;
        if (this.nextPage) {
          this.$loadButton.innerText = "Load more";
          this.$loadButton.disabled = false;
        } else {
          this.$loadButton.innerText = "The end";
          this.$loadButton.disabled = true;
        }
      })
      .catch((err) => {
        console.error(err);
        this.isLoading = false;
        this.$loadButton.innerText = "Error: Reload the page.";
        this.$loadButton.disabled = false;
      });
  };

  const kiosk = new Kiosk();
  kiosk.init();
  // const infiniteScroller = new InfiniteScroll(() => kiosk.fetchMore());
  // infiniteScroller.init();
</script>
